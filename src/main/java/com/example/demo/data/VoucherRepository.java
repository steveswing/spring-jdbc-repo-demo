package com.example.demo.data;

import java.util.List;

import org.springframework.data.jdbc.repository.query.Query;
import org.springframework.stereotype.Repository;

import com.example.demo.domain.Voucher;

@Repository
public interface VoucherRepository extends org.springframework.data.repository.Repository<Voucher, String> {
    @Query("SELECT A.ORIGIN, A.VCHR_SRC, B.NAME1, B.VENDOR_ID, A.BUSINESS_UNIT_GL, A.INVOICE_ID, A.VOUCHER_ID, A.PO_ID, A.PYMNT_TERMS_CD, A.DSCNT_AMT_FLG, D.PYMNT_ID, D.PYMNT_ID_REF, D" +
            ".PYMNT_METHOD, SUM(A.GROSS_AMT), A.DSCNT_AMT, TRUNC(A.RECEIPT_DT), TRUNC(A.INVOICE_DT), TRUNC(A.DUE_DT), TRUNC(A.DSCNT_DUE_DT), TRUNC(A.ENTERED_DT), TRUNC(CAST((A.APPROVAL_DTTM) AS " +
            "TIMESTAMP)), TRUNC(D.PYMNT_DT) FROM PS_VOUCHER A, PS_SP_BU_AP_CLSVW A1, PS_VENDOR B, PS_PYMNT_VCHR_XREF C, PS_Z_PAYMENT_VW D WHERE A.BUSINESS_UNIT = A1.BUSINESS_UNIT AND A1.OPRCLASS = " +
            "'PPSSAL01' AND C.BUSINESS_UNIT = A1.BUSINESS_UNIT AND (A.VENDOR_ID = B.VENDOR_ID AND A.BUSINESS_UNIT = C.BUSINESS_UNIT AND A.VOUCHER_ID = C.VOUCHER_ID AND C.PYMNT_SELCT_STATUS = 'P' " +
            "AND D.BANK_SETID = C.BANK_SETID AND D.BANK_CD = C.BANK_CD AND D.BANK_ACCT_KEY = C.BANK_ACCT_KEY AND D.PYMNT_ID = C.PYMNT_ID)GROUP BY A.ORIGIN, A.VCHR_SRC, B.NAME1, B.VENDOR_ID, A" +
            ".BUSINESS_UNIT_GL, A.INVOICE_ID, A.VOUCHER_ID, A.PO_ID, A.PYMNT_TERMS_CD, A.DSCNT_AMT_FLG, D.PYMNT_ID, D.PYMNT_ID_REF, D.PYMNT_METHOD, A.DSCNT_AMT, TRUNC(A.RECEIPT_DT), TRUNC(A" +
            ".INVOICE_DT), TRUNC(A.DUE_DT), TRUNC(A.DSCNT_DUE_DT), TRUNC(A.ENTERED_DT), TRUNC(CAST((A.APPROVAL_DTTM) AS TIMESTAMP)), TRUNC(D.PYMNT_DT)")
    List<Voucher> fetchUnpaid();

    @Query("SELECT A.BUSINESS_UNIT, A.VOUCHER_ID, A.INVOICE_ID, A.INVOICE_DT, A.GROSS_AMT, B.REMIT_VENDOR, C.NAME1, B.SCHEDULED_PAY_DT, B.REMIT_ADDR_SEQ_NUM, " +
            "    B.PYMNT_METHOD, B.PYMNT_HOLD, A.ORIGIN, A.POST_STATUS_AP, A.PROCESS_MAN_CLOSE, A.DUE_DT, A.DSCNT_DUE_DT, A.ENTERED_DT, " +
            "    A.LAST_UPDATE_DT, A.APPR_STATUS, A.OPRID_LAST_UPDT, A.VOUCHER_TYPE, A.Z_PRE_MATCH_FLAG, A.VENDOR_CLASS, A.VOUCHER_STYLE, A.Z_WF_EAPVL_SENT, " +
            "    A.Z_WF_APV_SENT_DT, A.SHIPTO_ID, A.ERROR_FLAG, B.PYMNT_HOLD_REASON, A.Z_WF_APRVL_TYPE, A.VCHR_SRC, A.MATCH_ACTION, A.MATCH_STATUS_VCHR, A.DESCR254_MIXED, A.ENTRY_STATUS, " +
            "    A.INVOICE_DT, A.INVOICE_DT, A.INVOICE_DT, A.INVOICE_DT, A.INVOICE_DT, A.INVOICE_DT, A.INVOICE_DT, B.DUE_DT, A.INVOICE_DT, A.INVOICE_DT, " +
            "    A.INVOICE_DT, A.INVOICE_DT FROM PS_VOUCHER A, PS_SP_BU_AP_CLSVW A1, PS_PYMNT_VCHR_XREF B, PS_SP_BU_AP_CLSVW B1, PS_VENDOR C " +
            "WHERE (A.BUSINESS_UNIT = A1.BUSINESS_UNIT AND A1.OPRCLASS = 'PPSSAL01' AND B.BUSINESS_UNIT = B1.BUSINESS_UNIT AND B1.OPRCLASS = 'PPSSAL01' " +
            "    AND (A.BUSINESS_UNIT = B.BUSINESS_UNIT AND A.VOUCHER_ID = B.VOUCHER_ID AND A.CLOSE_STATUS <> 'C' AND A.ENTRY_STATUS <> 'X' " +
            "        AND B.PYMNT_SELCT_STATUS = 'N' AND C.VENDOR_ID = A.VENDOR_ID AND A.PROCESS_MAN_CLOSE <> 'Y' AND A.ENTERED_DT < TO_DATE(CURRENT_DATE, 'YYYY-MM-DD')))")
    List<Voucher> fetchPaid();
}
